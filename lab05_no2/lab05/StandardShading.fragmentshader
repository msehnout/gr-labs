#version 330 core

// interpolated values from the vertex shaders (vertex_position_modelspace, 
// vertex_normal_modelspace and vertex_UV coordinates)
in vec3 vertex_position_modelspace;
in vec3 vertex_normal_modelspace;
in vec2 vertex_UV;

// uniform variables (lightPosition_worldspace, V, M)
uniform vec3 light_position_worldspace;
uniform mat4 V;
uniform mat4 M;

// Task 5.3: define uniform variables for the texture coordinates
// (diffuseColorSampler, specularColorSampler)
uniform sampler2D diffuseColorSampler;
uniform sampler2D specularColorSampler;

// output data
out vec4 fragment_color;

vec4 Ls,Ld,La,Ks,Kd,Ka,Ia;
float Ns;

void main()
{
    // default color
    fragment_color = vec4(1, 1, 1, 1);

    // Task 2.1: model light; specular (Ls), diffuse (Ld) and ambient (La) color

    Ls= vec4(1.0,1.0,1.0,1.0);
    Ld= vec4(1.0,1.0,1.0,1.0);
    La= vec4(1.0,1.0,1.0,1.0);

    // Task 2.2: model material properties; specular (Ks), diffuse (Kd), 
    // ambient (Ka) color and specular exponent (Ns) (gold material)
    /* Gold
        specular  0.628281, 0.555802, 0.366065
        diffuse   0.75164, 0.60648, 0.22648
        ambient   0.24725, 0.1995, 0.0745
        shininess 51.2
    */
    Ks= vec4(0.628281,0.555802,0.366065,1.0);
    Kd= vec4(0.75164,0.60648,0.22648,1.0);
    Ka= vec4(0.24725,0.1995,0.0745,1.0);
    Ns=51.2;

    // Homework 2: make model materials as uniform variables and display multiple 
    // instances of the model with different materials
    // http://www.barradeau.com/nicoptere/dump/materials.html

    // Task 6.5: assign material properties from the texture maps
    /*/
    Ks = vec4(texture(specularColorSampler, vertex_UV).rgb, 1);
    Kd = vec4(...);
    Ka = vec4(0.1, 0.1, 0.1);
    Ns = 10;
    //*/

    // Task 2.3: model ambient intensity (Ia)
    Ia = Ka*La;

    // Task 3: model diffuse intensity
    // Task 3.3: transform light position, vertex position and vertex normal 
    // in camera space (N). Attention: vertex normal is a directional vector 
    // (Homogeneous Transformations).
    // Task 3.4: calculate distance to light and normalized direction (L) in camera space 

    //vec_vertex_position=vec4()
    //vec_normal_position=vec4()
    vec3 vertex_position_cameraspace = (V*M*vec4(vertex_position_modelspace,1)).xyz;
    /* vertex_normal_cameraspace: */
    vec3 N = normalize((V*M*vec4(vertex_normal_modelspace,0)).xyz);

    vec3 light_position_cameraspace = (V * vec4(light_position_worldspace, 1)).xyz;
    vec3 L = normalize(light_position_cameraspace - vertex_position_cameraspace);

    // Task 3.5: compute cos(theta)
    // cosine of the angle between the normal and the light direction, 
    // clamped above 0; use clamp(float, min, max)
    //  - light is at the vertical of the triangle -> 1
    //  - light is perpendicular to the triangle -> 0
    //  - light is behind the triangle -> 0
    float costheta = clamp(dot(L,N),0.0,1.0);

    // Task 3.6: calculate the diffuse intensity and the new fragment color
    vec4 Id = Ld * Kd * costheta;
    fragment_color = Ia + Id;

    // Task 4: model specular intensity
    // Task 4.1: compute reflexion direction (R) in camera space
    vec3 R = reflect(-L,N);
    // Task 4.2: compute surface to viewer direction (E) in camera space
    vec3 E = normalize(-vertex_position_cameraspace);
    // Task 4.3: compute cos(alpha)
    // cosine of the angle between the Eye vector and the Reflect vector,
    // clamped to 0; use clamp(float, min, max)
    //  - Looking into the reflection -> 1
    //  - Looking elsewhere -> < 1
    float dot_prod_specular = clamp(dot(R,E),0,1);
    // Task 4.4: calculate specular factor cos(a)^Ns
    float specular_factor = pow (dot_prod_specular, Ns);
    // Task 4.5: calculate the specular intensity and the new fragment color
    vec4 Is = Ls * Ks * specular_factor;


    // Task 5: model the light distance effect (add a light_power parameter).
    // Change camera position to verify the correct behavior.
    //vec3 v = vertex_position_cameraspace;
    //vec3 l = light_position_cameraspace;
    //d_squared = pow(v.x-l.x, 2) + pow(v.y-l.y, 2) + pow(v.z-l.z, 2);
    fragment_color = Ia + Id + Is;
    //fragment_color = Ia + Id/d_squared + Is/d_squared;
           
    // Homework 3: make light properties as uniform variables and use the keyboard  
    // keys to adjust them (position, light color and power).
}